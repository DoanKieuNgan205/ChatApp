import fs from "fs";
import path from "path";
import net from "net";
import { CONFIG } from "../utils/config.js";

/**
 * G·ª≠i tin nh·∫Øn ho·∫∑c file gi·ªØa c√°c user qua Gateway ‚Üí ChatServer (C++).
 * @param {WebSocket} ws - k·∫øt n·ªëi WebSocket hi·ªán t·∫°i.
 * @param {Object} clientsOnline - danh s√°ch user ƒëang online.
 * @param {Object} data - d·ªØ li·ªáu tin nh·∫Øn g·ª≠i t·ª´ frontend.
 */
export function handleChatMessage(ws, clientsOnline, data) {
  const { from, to, message, filepath, filename } = data;

  // üü¶ N·∫øu c√≥ file ‚Üí g·ª≠i t·ªõi FileServer (port 9999)
  if (filepath) {
    const tcpFileClient = new net.Socket();
    const fileSize = fs.statSync(filepath).size;

    tcpFileClient.connect(CONFIG.TCP_PORT_FILE, CONFIG.TCP_HOST, () => {
      const header = JSON.stringify({
        action: "sendfile",
        from,
        to,
        filename,
        size: fileSize,
      }) + "\n";
      tcpFileClient.write(header);
      fs.createReadStream(filepath).pipe(tcpFileClient);
    });

    tcpFileClient.on("close", () => {
      console.log(`[Chat] üì¶ File '${filename}' sent from ${from} to ${to}`);
      const toClient = clientsOnline[to];
      if (toClient) {
        toClient.send(JSON.stringify({
          action: "private",
          from,
          file: `/uploads/${path.basename(filepath)}`,
          filename
        }));
      }
      fs.unlink(filepath, () => {});
    });

    tcpFileClient.on("error", (err) => {
      console.error("[FileServer] ‚ùå Error:", err.message);
    });

    return;
  }

  // üü® N·∫øu l√† tin nh·∫Øn text ‚Üí g·ª≠i qua ChatServer (port 8888)
  if (message && ws.chatClient) {
    const msgPayload = JSON.stringify({
      action: "private",
      from,
      to,
      message
    }) + "\n";

    ws.chatClient.write(msgPayload);
    console.log(`[Chat] üí¨ ${from} ‚Üí ${to}: ${message}`);
  }
  // N·∫øu ChatServer ch∆∞a s·∫µn s√†ng ‚Üí fallback g·ª≠i tr·ª±c ti·∫øp gi·ªØa frontend
  else if (message && !ws.chatClient) {
    const toClient = clientsOnline[to];
    if (toClient) {
      toClient.send(JSON.stringify({ action: "private", from, message }));
    } else {
      ws.send(JSON.stringify({
        action: "system",
        message: `‚ö†Ô∏è Ng∆∞·ªùi d√πng '${to}' hi·ªán kh√¥ng online.`,
      }));
    }
  }
}
